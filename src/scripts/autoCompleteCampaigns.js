const mongoose = require('mongoose');
const Campaign = require('../models/Campaign');
const { logCampaignActivity, ACTIVITY_TYPES } = require('../utils/activityLogger');

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/echopub';
//console.log(`üîó Connexion √† MongoDB: ${process.env.MONGODB_URI}`);

// Fonction pour se connecter √† la base de donn√©es
async function connectDB(MONGODB_URI) {
  try {
    console.log('MONGODB_URI', MONGODB_URI);
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connexion √† MongoDB √©tablie');
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† MongoDB:', error);
    process.exit(1);
  }
}

// Fonction pour fermer la connexion √† la base de donn√©es
async function closeDB() {
  try {
    await mongoose.connection.close();
    console.log('‚úÖ Connexion √† MongoDB ferm√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la fermeture de MongoDB:', error);
  }
}

// Fonction principale pour compl√©ter automatiquement les campagnes
async function autoCompleteCampaigns() {
  try {
    //await connectDB();
    console.log('üîÑ D√©but de la v√©rification automatique des campagnes...');
    
    const now = new Date();
    console.log(`‚è∞ Heure actuelle: ${now.toISOString()}`);
    
    // Trouver toutes les campagnes actives ou en pause dont la date de fin est pass√©e
    const campaignsToComplete = await Campaign.find({
      status: { $in: ['active', 'paused'] },
      campaign_test: false,
      end_date: {
          $exists: true,
          $ne: null,
          $lte: new Date(), // doit √™tre pass√©e
        }
    }).populate('advertiser', 'name');
    
    console.log(`üìä ${campaignsToComplete.length} campagne(s) trouv√©e(s) √† compl√©ter`);
    
    if (campaignsToComplete.length === 0) {
      console.log('‚úÖ Aucune campagne √† compl√©ter');
      return;
    }
    
    // Traiter chaque campagne
    let completedCount = 0;
    let errorCount = 0;
    
    for (const campaign of campaignsToComplete) {
      try {
        console.log(`\nüìù Traitement de la campagne: ${campaign.title} (ID: ${campaign._id})`);
        console.log(`   - Statut actuel: ${campaign.status}`);
        console.log(`   - Date de fin: ${campaign.end_date}`);
        console.log(`   - Annonceur: ${campaign.advertiser?.name || 'Inconnu'}`);
        
        // Changer le statut √† completed
        campaign.status = 'completed';
        campaign.completed_at = now;
        
        // Sauvegarder la campagne
        await campaign.save();
        
        console.log(`   ‚úÖ Statut chang√© √† 'completed'`);
        
        // Logger l'activit√©
        try {
          await logCampaignActivity(ACTIVITY_TYPES.CAMPAIGN_COMPLETED, campaign, {
            id: 'system',
            name: 'Syst√®me Automatique',
            role: 'system'
          }, {
            previousStatus: campaignsToComplete.find(c => c._id.toString() === campaign._id.toString())?.status,
            newStatus: 'completed',
            changedBy: 'Syst√®me Automatique',
            reason: 'Date de fin d√©pass√©e'
          });
          console.log(`   üìù Activit√© logg√©e`);
        } catch (logError) {
          console.warn(`   ‚ö†Ô∏è Erreur lors du logging de l'activit√©:`, logError.message);
        }
        
        completedCount++;
        
      } catch (campaignError) {
        console.error(`   ‚ùå Erreur lors du traitement de la campagne ${campaign.title}:`, campaignError.message);
        errorCount++;
      }
    }
    
    // R√©sum√© final
    console.log('\nüìã R√©sum√© de l\'ex√©cution:');
    console.log(`   ‚úÖ Campagnes compl√©t√©es: ${completedCount}`);
    console.log(`   ‚ùå Erreurs: ${errorCount}`);
    console.log(`   üìä Total trait√©: ${campaignsToComplete.length}`);
    
    if (completedCount > 0) {
      console.log('\nüéâ Script ex√©cut√© avec succ√®s!');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors de l\'ex√©cution du script:', error);
    throw error;
  }
}

// Fonction pour ex√©cuter le script en mode standalone
async function runStandalone() {
  try {
    await connectDB();
    await autoCompleteCampaigns();
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  } finally {
    await closeDB();
    process.exit(0);
  }
}

// Fonction pour ex√©cuter le script en mode cron (sans fermer la connexion)
async function runCron() {
  try {
    await autoCompleteCampaigns();
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution cron:', error);
  }
}

// Ex√©cution du script
if (require.main === module) {
  // Mode standalone (ex√©cution directe)
  console.log('üöÄ D√©marrage du script de compl√©tion automatique des campagnes...');
  runStandalone();
} else {
  // Mode module (import√© par un autre script)
  module.exports = {
    runCron,
    autoCompleteCampaigns,
    connectDB,
    closeDB
  };
}
